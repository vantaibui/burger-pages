{"version":3,"sources":["BaiTapBurger/Index.jsx","App.js","serviceWorker.js","Redux/Reducer/BurgerReducer.js","Redux/Reducer/rootReducer.js","index.js"],"names":["Index","renderBread","burger","props","content","propsBurger","breadMid","i","push","key","className","renderMenu","menu","Object","entries","map","index","propsMenu","price","onClick","addBreadMid","type","this","colSpan","total","Component","connect","state","BurgerReducer","dispatch","amount","App","Boolean","window","location","hostname","match","stateBurger","salad","cheese","beef","stateBurgerReducer","action","burgerUpdate","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4SAIMA,G,kNACJC,YAAc,WAAO,IACbC,EAAW,EAAKC,MAAhBD,OACFE,EAAU,GACd,IAAK,IAAIC,KAAeH,EAAQ,CAE9B,IADA,IAAII,EAAW,GACNC,EAAI,EAAGA,EAAIL,EAAOG,GAAcE,IACvCD,EAASE,KAAK,yBAAKC,IAAKF,EAAGG,UAAWL,KAExCD,EAAQI,KAAKF,GAEf,OAAOF,G,EAETO,WAAa,WAAO,IAAD,EACM,EAAKR,MAAtBS,EADW,EACXA,KAAMV,EADK,EACLA,OACZ,OAAOW,OAAOC,QAAQF,GAAMG,KAAI,WAAqBC,GAAW,IAAD,mBAA7BC,EAA6B,KAAlBC,EAAkB,KAC7D,OACE,wBAAIT,IAAKO,GACP,4BAAKC,GACL,4BACE,4BACEE,QAAS,WACP,EAAKhB,MAAMiB,YAAYH,GAAY,IAErCI,KAAK,SACLX,UAAU,uBALZ,KASA,4BACES,QAAS,WACP,EAAKhB,MAAMiB,YAAYH,EAAW,IAEpCI,KAAK,SACLX,UAAU,mBALZ,MAUF,4BAAKQ,GACL,4BAAKhB,EAAOe,GAAaC,Q,uDAM/B,OACE,yBAAKR,UAAU,aACb,wBAAIA,UAAU,4BAAd,0BACA,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,sCACb,wBAAIA,UAAU,mCAAd,oBACA,yBAAKA,UAAU,aACdY,KAAKrB,cACN,yBAAKS,UAAU,iBAEjB,yBAAKA,UAAU,sCACb,wBAAIA,UAAU,uBAAd,+BACA,2BAAOA,UAAU,SACf,+BACE,4BACE,iDACA,6BACA,sCAHF,MAMF,+BAAQY,KAAKX,cACb,+BACE,4BACE,wBAAIY,QAAQ,MACZ,qDACA,4BAAKD,KAAKnB,MAAMqB,iB,GAvEdC,cA4GLC,eAzBS,SAACC,GACvB,MAAO,CACLzB,OAAQyB,EAAMC,cAAc1B,OAC5BU,KAAMe,EAAMC,cAAchB,KAC1BY,MAAOG,EAAMC,cAAcJ,UAIJ,SAACK,GAC1B,MAAO,CACLT,YAAa,SAACf,EAAayB,GAMzBD,EAAS,CACPR,KAAM,gBACNhB,cACAyB,eAMOJ,CAA6C1B,GCtG7C+B,E,uKAJP,OAAO,kBAAC,EAAD,U,GAFGN,aCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBClBAC,EAAc,CAChBnC,OAAQ,CAAEoC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,GACrC5B,KAAM,CACF0B,MAAO,GACPC,OAAQ,GACRC,KAAM,IAEVhB,MAAO,IAsBIiB,EAnBY,WAAkC,IAAjCd,EAAgC,uDAAxBU,EAAaK,EAAW,uCACxD,OAAQA,EAAOrB,MACX,IAAK,gBACA,IACShB,EAAwBqC,EAAxBrC,YAAayB,EAAWY,EAAXZ,OACfa,EAAY,eAAOhB,EAAMzB,QAC7B,OAAgB,IAAZ4B,GAAiBH,EAAMzB,OAAOG,GAAe,IAGjDsC,EAAatC,IAAgByB,EAC7BH,EAAMzB,OAASyC,EAEfhB,EAAMH,OAASM,EAASH,EAAMf,KAAKP,IALxB,eAAIsB,GAS3B,OAAO,eAAIA,ICnBAiB,EAJKC,YAAgB,CAChCjB,kBCQEkB,EAAQC,YAAYH,GAE1BI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SH+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b54408d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./style.css\";\r\n\r\nclass Index extends Component {\r\n  renderBread = () => {\r\n    let { burger } = this.props;\r\n    let content = [];\r\n    for (let propsBurger in burger) {\r\n      let breadMid = [];\r\n      for (let i = 0; i < burger[propsBurger]; i++) {\r\n        breadMid.push(<div key={i} className={propsBurger}></div>);\r\n      }\r\n      content.push(breadMid);\r\n    }\r\n    return content;\r\n  };\r\n  renderMenu = () => {\r\n    let { menu, burger } = this.props;\r\n    return Object.entries(menu).map(([propsMenu, price], index) => {\r\n      return (\r\n        <tr key={index}>\r\n          <td>{propsMenu}</td>\r\n          <td>\r\n            <button\r\n              onClick={() => {\r\n                this.props.addBreadMid(propsMenu, -1);\r\n              }}\r\n              type=\"button\"\r\n              className=\"btn btn-danger mr-2\"\r\n            >\r\n              -\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                this.props.addBreadMid(propsMenu, 1);\r\n              }}\r\n              type=\"button\"\r\n              className=\"btn btn-success\"\r\n            >\r\n              +\r\n            </button>\r\n          </td>\r\n          <td>{price}</td>\r\n          <td>{burger[propsMenu] * price}</td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h2 className=\"text-center text-primary\">Bài tập Burger</h2>\r\n        <div className=\"row border border-danger p-5\">\r\n          <div className=\"col-sm-7 border border-warning m-0\">\r\n            <h2 className=\"text-center text-secondary mb-3\">Cửa hàng</h2>\r\n            <div className=\"breadTop\"></div>\r\n            {this.renderBread()}\r\n            <div className=\"breadBottom\"></div>\r\n          </div>\r\n          <div className=\"col-sm-5 border border-warning m-0\">\r\n            <h2 className=\"text-secondary mb-3\">Chọn thức ăn</h2>\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Thức ăn</th>\r\n                  <th></th>\r\n                  <th>Giá</th>>\r\n                </tr>\r\n              </thead>\r\n              <tbody>{this.renderMenu()}</tbody>\r\n              <tfoot>\r\n                <tr>\r\n                  <td colSpan=\"2\"></td>\r\n                  <td>Tổng tiền: </td>\r\n                  <td>{this.props.total}</td>\r\n                </tr>\r\n              </tfoot>\r\n            </table>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    burger: state.BurgerReducer.burger,\r\n    menu: state.BurgerReducer.menu,\r\n    total: state.BurgerReducer.total,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addBreadMid: (propsBurger, amount) => {\r\n      // const action = {\r\n      //   type: \"ADD_BREAD_MID\",\r\n      //   propsBurger,\r\n      //   amount,\r\n      // };\r\n      dispatch({\r\n        type: \"ADD_BREAD_MID\",\r\n        propsBurger,\r\n        amount,\r\n      });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Index from \"./BaiTapBurger/Index\";\n\nclass App extends Component {\n    render() {\n        return <Index / > ;\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const stateBurger = {\r\n    burger: { salad: 1, cheese: 1, beef: 1 },\r\n    menu: {\r\n        salad: 10,\r\n        cheese: 20,\r\n        beef: 55,\r\n    },\r\n    total: 85,\r\n};\r\n\r\nconst stateBurgerReducer = (state = stateBurger, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_BREAD_MID\":\r\n            {\r\n                let { propsBurger, amount } = action;\r\n                let burgerUpdate = {...state.burger };\r\n                if (amount === -1 && state.burger[propsBurger] < 1) {\r\n                    return {...state };\r\n                }\r\n                burgerUpdate[propsBurger] += amount;\r\n                state.burger = burgerUpdate;\r\n\r\n                state.total += amount * state.menu[propsBurger];\r\n                return {...state }\r\n            }\r\n    }\r\n    return {...state };\r\n};\r\n\r\nexport default stateBurgerReducer;","import { combineReducers } from \"redux\";\r\nimport BurgerReducer from \"../Reducer/BurgerReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    BurgerReducer,\r\n});\r\n\r\nexport default rootReducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Cài đặt redux\n\nimport { Provider } from \"react-redux\";\nimport {createStore} from \"redux\";\nimport rootReducer from \"./Redux/Reducer/rootReducer\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}